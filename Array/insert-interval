/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        int len = intervals.size();
        vector<Interval> result;
        Interval temp;
        bool flag = false;
        for(int i = 0; i < len; ++i)
        {
            if(newInterval.start > intervals[i].end 
            || newInterval.end < intervals[i].start)
            {
                result.push_back(intervals[i]);
            }
            else
            {
                newInterval.start = min(newInterval.start,intervals[i].start);
                newInterval.end = max(newInterval.end,intervals[i].end);
            }
        }
    for(vector<Interval>::iterator iter = result.begin(); iter!=result.end();++iter)
    {
        if(iter->start < newInterval.start)continue;
        else
        {
            result.insert(iter,newInterval);
            return result;
        }
    }
        result.push_back(newInterval);
        return result; 
    }
};
