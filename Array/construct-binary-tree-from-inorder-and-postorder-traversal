/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* getR(vector<int>& inorder, int is, int ie, vector<int>& postorder, int ps, int pe)
    {
        if(is >= ie || ps >= pe)return NULL;
        
        int rootVal = postorder[pe];
        TreeNode* root = new TreeNode(rootVal);
        
        int i = is;
        for(; i < ie; ++i)
        {
            if(inorder[i] == rootVal)
                break;
        }
        
        int leftNum = i - is;
        root->left = getR(inorder, is, is + leftNum, postorder, ps, ps + leftNum);
        root->right= getR(inorder, i + 1, ie, postorder, ps + leftNum, pe - 1);
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        TreeNode* res = getR(inorder, 0, inorder.size(), postorder, -1, postorder.size() - 1);
        return res;
    }
};
